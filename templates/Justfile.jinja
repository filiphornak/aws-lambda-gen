sources  := "{{ group_name }} tests"
python   := {{ python_version }}
platform := 'manylinux2014_x86_64'
stubs    := 'typings'
config   := 'pyproject.toml'
package  := '{{ package }}'


alias r := ruff
alias l := pylint
alias t := test
alias tr := test-cov-report
alias m := types
alias c := clean
alias p := package

# Execute ruff linter on specified/project files. Docs: https://beta.ruff.rs/docs/
ruff +FILES=sources:
    @echo "Running ruff ..."
    poetry run ruff check {{ '{{' }} FILES {{ '}}' }}

# Run pylint static code analyser tool on provided/project files. Docs: https://pylint.readthedocs.io/en/latest
pylint +FILES=sources:
    @echo "Running pylint ..."
    poetry run pylint {{ '{{' }} FILES {{ '}}' }}

# Execute tests with pytest, You can specify arguments to pytests e.g. -k test_greet. Docs: https://docs.pytest.org/en/7.3.x/
test *ARGS:
    @echo "Running pytest ..."
    poetry run pytest {{ '{{' }} ARGS {{ '}}' }}

# Execute tests and collect coverage reports. Docs: https://coverage.readthedocs.io/en/7.2.5/index.html
test-cov:
    poetry run coverage run -m pytest --junitxml=pytest.xml
    poetry run coverage combine
    poetry run coverage xml

# Execute tests and reports coverage
test-cov-report:
    poetry run coverage run -m pytest
    poetry run coverage report

# Run mypy type checker for provided sources. Docs: https://mypy.readthedocs.io/en/stable/index.html
types +FILES=sources:
    @echo "Running mypy ..."
    poetry run mypy --no-incremental --namespace-packages --config-file {{ '{{' }}' config {{ '}}' }}
    @echo "Runnign mypy on tests ..."
    poetry run mypy --no-incremental --config-file {{ '{{' }} config {{ '}}' }} tests integration

# Execute generator of stub files. DON'T FORGET TO CHECK GENERATED FILES BEFORE COMMIT. Docs: https://mypy.readthedocs.io/en/stable/stubgen.html
types-gen:
    @echo "Generating stub files"
    poetry run stubgen -o {{ '{{' }} stubs {{ '}}' }} --package {{ '{{' }} package {{ '}}' }}

# Execute consistency check between stub files and sources. Docs: https://mypy.readthedocs.io/en/stable/stubtest.html
types-test:
    @echo "Testing stub file types against the code"
    poetry run stubtest --mypy-config-file {{ '{{' }} config {{ '}}' }}

# Delete stub stub files
types-clean:
    @echo "Deleting stub files ..."
    @rm -rf {{ '{{' }} stubs {{ '}}' }}

# Run black --check on all/specified files, this operation does not perform code reformat.
format-check +FILES=sources:
    @echo "Executing black format check ..."
    poetry run black --check {{ '{{' }} FILES {{ '}}' }}

# Format all/specified files using black formatter. Docs: https://black.readthedocs.io/en/stable/
format +FILES=sources:
    @echo "Executing black python formatter ..."
    poetry run black {{ '{{' }} FILES {{ '}}' }}

# Create project development/ci virtual environment used by poetry, it installs basic linters and test tools
prepare-dev:
    @echo "Preparing dev environment ..."
    poetry install --no-root --only main,dev

# Remove files/directories generated by test/lint tools and caches
clean:
    @echo "Cleaning project ..."
    @echo "Cleaning caches ..."
    @fd '__pycache__' --type d -x rm -rf || find . -name '__pycache__' -type d -exec rm -rf {} \;
    rm -rf .ruff_cache .mypy_cache .pytest_cache
    @echo "Cleaning packages ..."
    rm -rf package dist artifact.zip
    @echo "Cleaning coverage files .."
    rm -f coverage.xml pytest.xml
    @poetry run coverage erase

# Packages project as zip usable in aws lambda
package PLATFORM=platform PYTHON_VERSION=python:
    @echo "Building package..."
    poetry build
    poetry run \
        pip install \
            --platform {{ '{{' }} PLATFORM {{ '}}' }} \
            --implementation cp \
            --python-version {{ '{{' }} PYTHON_VERSION {{ '}}' }} \
            --only-binary=:all: \
            --target package \
            --upgrade \
            dist/*.whl 
    cd package && zip --recurse-paths --no-dir-entries -X ../artifact.zip . --exclude '*.pyc' '*__pycache__*'


create-precommit-hook:
    #!/usr/bin/env sh -euo pipefail
    ROOT="$(git rev-parse --show-toplevel)"
    cd $ROOT
    if [ ! -f ".git/hook/pre-commit" ]; then
        echo "#!/usr/bin/env sh -euo pipefail\n" > .git/hooks/pre-commit
        chmod +x .git/hooks/pre-commit
    fi
    GREP="$([ ! command -v rg &>/dev/null ] && echo "rg" || echo "grep")"
    if [ ! $GREP "exec &1>2" .git/hooks/pre-commit ]; then
        tee -a .git/hooks/pre-commit <<EOT

# Redirecting stdout to stderr
exec 1>&2
EOT
    fi
    if [ ! $GREP "declare against=HEAD" .git/hooks/pre-commit &>/dev/null ]; then
        echo "Adding against code block in .git/hooks/pre-commit"

        tee -a .git/hooks/pre-commit <<EOT


if git rev-parse --verify HEAD >/dev/null 2>&1
then
	declare against=HEAD
else
	# Initial commit: diff against an empty tree object
	declare against=$(git hash-object -t tree /dev/null)
fi
EOT
    fi
    
    echo "Checking presence of linter exec in .git/hooks/pre-commit ..."
    if [ ! $GREP 'if ! git diff --quiet $against -- {{ project_path }}; then' .git/hooks/pre-commit ]; then

        echo "Adding linter executor to pre-commit hook"
        tee -a .git/hooks/pre-commit <<EOT

# Execute ruff and black linters on change in {{ project_path }}
if ! git diff --quiet $against -- {{ project_path }}; then
    echo "Changing directory to: {{ project_path }}"
    cd {{ project_path }}
    echo "Running ruff linter"
    poetry run ruff {{ '{{' }} sources {{ '}}' }}
    echo "Running formatting check"
    poetry run black --check {{ '{{' }} sources {{ '}}' }}
    cd -
fi
EOT
    fi



